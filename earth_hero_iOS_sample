//
//  CreateGroupDetailsViewController.swift
//  EarthHero
//
//  Copyright Â© 2022 Earth Hero. All rights reserved.
//

import UIKit

class CreateGroupDetailsViewController: UIViewController, UIScrollViewDelegate, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout, UITextViewDelegate {
    
    // Used with Main Flow Coordinator
    enum Action {
        case didClimateGroupFinder
        case didCreateGroup
        case didGoToGroupDash
    }
    
    private let onAction: ((Action) -> Void)?
    
    init(onAction: ((Action) -> Void)? = nil) {
        self.onAction = onAction
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // Variable to keep track of user data.
    var userInformation: UserInformation?
    
    lazy var scrollView: UIScrollView = standardScrollView()

    let subTitleLabel = standardCopyLabelMidtone()
    
    // Create Group Fields View
    let createGroupForm: UIView = {
        let view = UIView()
        view.backgroundColor = .clear
        view.layer.cornerRadius = standardCornerRadius
        view.translatesAutoresizingMaskIntoConstraints = false
        view.clipsToBounds = true
        return view
    }()
    
    var earthHeroImageView: UIImageView = {
        let imageView = UIImageView(image: UIImage(named: "climate_group_77_landscape"))
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.contentMode = .scaleAspectFit
        imageView.clipsToBounds = true
        imageView.layer.borderWidth = standardBorderWidth
        imageView.layer.borderColor = colorLighter.cgColor
        //imageView.alpha = 0
        return imageView
    }()
    
    // Scrollable View
    let horizontalScrollView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        layout.sectionInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        layout.minimumInteritemSpacing = 0
        layout.minimumLineSpacing = screenWidth * 0.05
        let collection = UICollectionView(frame: CGRect(x: 0, y: 0, width: 0, height: 0), collectionViewLayout: layout)
        collection.backgroundColor = .clear
        collection.translatesAutoresizingMaskIntoConstraints = false
        collection.isScrollEnabled = true
        collection.showsHorizontalScrollIndicator = false
        return collection
    }()
        
    let createGroupsTitleLabel = standardSmallDisplayLabelDark()
    let createGroupsDescLabel = standardSmallDisplayLabelDark()
    
    let chooseCoverPhotolabel = standardSmallDisplayLabelDark()
    let coverPhotoScrollView = standardScrollView()
   
    let createGroupsCreateButton = standardWaterDarkButton()
    //let createGroupTextInput = groupsTextField()
    let createGroupTextInput: UITextView = UITextView()
    let groupDescInput: UITextView = UITextView()

    let communityGroupsCreateButton = standardWaterDarkButton()
    
    let setGoalLabel = standardSmallDisplayLabelDark()
    let setGroupGoal = setGroupGoalDropdown(idValue: "")
    
    // Pop up
    let infoTranslucentBackground = blurEffectBackgroundView()
            
    // Pop up message
    let messageView: UIView = popUpMessageView()
    let earthSproutView: UIImageView = earthSproutGif()
    let earthSproutAnimation: UIImageView = earthSproutAnimationView()
    let messageTitle: UILabel = standardSmallDisplayLabelDark()
    let messageTextName: UILabel = standardTitleLabelMidtone()
    let messageText: UILabel = standardTitleLabelMidtone()

    let inviteButton: UIButton = standardWaterDarkButton()
    let dashboardButton = standardWaterDarkButton()
    
    // Invite Instructions
    let inviteView: UIView = popUpMessageView()
    let inviteText: UILabel = standardTitleLabelMidtone()
    let inviteButton2: UIButton = standardWaterDarkButton()
    let closeButton: UIButton = iconButton()
    //
    
    var isLoadingViewController = false
   
    override func viewWillAppear(_ animated: Bool) {
        self.navigationController?.setNavigationBarHidden(false, animated: true)
        self.navigationItem.title = NSLocalizedString("create_new_group_title", comment: "")
        
        // Transparent navigation bar
        self.navigationController?.navigationBar.setBackgroundImage(UIImage(), for: .default)
        self.navigationController?.navigationBar.shadowImage = UIImage()
        self.navigationController?.navigationBar.isTranslucent = true
        self.navigationController?.navigationBar.backgroundColor = .clear
        
        self.navigationItem.backBarButtonItem?.title = ""
    }
   
    override func viewDidLoad() {
       super.viewDidLoad()
            setupView()
    }

    func setupView() {
        
        // Background Color
        if #available(iOS 11.0, *) {
            view.backgroundColor = UIColor(named: "colorWhite")
        } else {
            // Fallback on earlier versions
            view.backgroundColor = colorWhite
        }
        
        // Scroll View
        scrollView.delegate = self
        view.addSubview(scrollView)
        scrollView.autoresizingMask = [.flexibleHeight]
        scrollView.topAnchor.constraint(equalTo: view.safeTopAnchor, constant: 0).isActive = true
        scrollView.bottomAnchor.constraint(equalTo: view.safeBottomAnchor).isActive = true
        scrollView.leadingAnchor.constraint(equalTo: view.safeLeadingAnchor).isActive = true
        scrollView.trailingAnchor.constraint(equalTo: view.safeTrailingAnchor).isActive = true
        scrollView.widthAnchor.constraint(equalToConstant: screenWidth).isActive = true

        // MARK: Sets up Create Group Text Fields
        scrollView.addSubview(createGroupForm)

        // TITLE
        createGroupsTitleLabel.text = NSLocalizedString("group_name", comment: "")
        scrollView.addSubview(createGroupsTitleLabel)
        createGroupsTitleLabel.topAnchor.constraint(equalTo: scrollView.topAnchor, constant: standardVerticalSpacer * 0.5).isActive = true
        createGroupsTitleLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: standardHorizontalSpacer).isActive = true

        // Testing for UITextField
//        scrollView.addSubview(createGroupTextInput)
//        createGroupTextInput.setAnchor(top: createGroupsTitleLabel.bottomAnchor, leading: view.safeLeadingAnchor, bottom: nil, trailing: view.safeTrailingAnchor, paddingTop: standardVerticalSpacer/6, paddingLeft: standardHorizontalSpacer, paddingBottom: standardVerticalSpacer, paddingRight: standardHorizontalSpacer)
        
        // Group Name as UITextField
        createGroupTextInput.translatesAutoresizingMaskIntoConstraints = false
        scrollView.addSubview(createGroupTextInput)
        createGroupTextInput.topAnchor.constraint(equalTo: createGroupsTitleLabel.bottomAnchor, constant: standardVerticalSpacer/6).isActive = true
        createGroupTextInput.leadingAnchor.constraint(equalTo: view.safeLeadingAnchor, constant: standardHorizontalSpacer).isActive = true
        createGroupTextInput.trailingAnchor.constraint(equalTo: view.safeTrailingAnchor, constant: -standardHorizontalSpacer).isActive = true
        createGroupTextInput.layer.borderColor = colorLight.cgColor
        
        // Group Name Field styling
        createGroupTextInput.heightAnchor.constraint(equalToConstant: screenHeight * 0.05).isActive = true
        createGroupTextInput.layer.cornerRadius = standardCornerRadius
        createGroupTextInput.layer.borderWidth = standardBorderWidth
        createGroupTextInput.layer.borderColor = colorLight.cgColor
        createGroupTextInput.backgroundColor = colorLighter
        createGroupTextInput.font = UIFont.systemFont(ofSize: standardFontSizeSmall)
        createGroupTextInput.textColor = colorDark
        createGroupTextInput.textContainerInset = UIEdgeInsets(top: standardHorizontalSpacer * 0.75, left: standardHorizontalSpacer * 0.5, bottom: standardHorizontalSpacer * 0.75, right: standardHorizontalSpacer * 0.5)
        createGroupTextInput.delegate = self
        
        
        // Group Description Label
        createGroupsDescLabel.text = NSLocalizedString("group_description", comment: "")
        scrollView.addSubview(createGroupsDescLabel)
        createGroupsDescLabel.setAnchor(top: createGroupTextInput.bottomAnchor, leading: view.safeLeadingAnchor, bottom: nil, trailing: view.safeTrailingAnchor, paddingTop: standardVerticalSpacer/6, paddingLeft: standardHorizontalSpacer, paddingBottom: standardVerticalSpacer, paddingRight: standardHorizontalSpacer)
        
        // Group Description
        groupDescInput.translatesAutoresizingMaskIntoConstraints = false
        scrollView.addSubview(groupDescInput)
        groupDescInput.topAnchor.constraint(equalTo: createGroupsDescLabel.bottomAnchor, constant: standardVerticalSpacer/6).isActive = true
        groupDescInput.leadingAnchor.constraint(equalTo: view.safeLeadingAnchor, constant: standardHorizontalSpacer).isActive = true
        groupDescInput.trailingAnchor.constraint(equalTo: view.safeTrailingAnchor, constant: -standardHorizontalSpacer).isActive = true
        
        // Group Description Input styling
        groupDescInput.heightAnchor.constraint(equalToConstant: screenHeight * 0.1).isActive = true
        groupDescInput.layer.cornerRadius = standardCornerRadius
        groupDescInput.layer.borderWidth = standardBorderWidth
        groupDescInput.layer.borderColor = colorLight.cgColor
        groupDescInput.backgroundColor = colorLighter
        groupDescInput.font = UIFont.systemFont(ofSize: standardFontSizeSmall)
        groupDescInput.textColor = colorDark
        groupDescInput.textContainerInset = UIEdgeInsets(top: standardHorizontalSpacer * 0.75, left: standardHorizontalSpacer * 0.5, bottom: standardHorizontalSpacer * 0.75, right: standardHorizontalSpacer * 0.5)
        groupDescInput.delegate = self
        
        
        // Cover Photo Label
        chooseCoverPhotolabel.text = NSLocalizedString("group_cover_photo", comment: "")
        scrollView.addSubview(chooseCoverPhotolabel)
        chooseCoverPhotolabel.setAnchor(top: groupDescInput.bottomAnchor, leading: view.safeLeadingAnchor, bottom: nil, trailing: view.safeTrailingAnchor, paddingTop: standardVerticalSpacer, paddingLeft: standardHorizontalSpacer, paddingBottom: standardVerticalSpacer, paddingRight: standardHorizontalSpacer)
        
        // Cover Photo - Horizontal ScrollView - TBD
        
        horizontalScrollView.delegate = self
        //horizontalScrollView.dataSource = self
        //horizontalScrollView.register(ClimateGroupCollectionCell.self, forCellWithReuseIdentifier: cellIDClimateGroups)
        
        view.addSubview(horizontalScrollView)
        horizontalScrollView.setAnchor(top: chooseCoverPhotolabel.bottomAnchor, leading: scrollView.leadingAnchor, bottom: nil, trailing: view.safeTrailingAnchor, paddingTop: standardVerticalSpacer/3, paddingLeft: standardHorizontalSpacer, paddingBottom: 0, paddingRight: 0, width: screenWidth * 0.95, height: cellHeightClimateActionGroup)
        
        // Photos
        horizontalScrollView.addSubview(earthHeroImageView)
        earthHeroImageView.topAnchor.constraint(equalTo: chooseCoverPhotolabel.bottomAnchor, constant: standardVerticalSpacer/2).isActive = true
//        earthHeroImageView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor, constant: standardHorizontalSpacer * 4).isActive = true
//        earthHeroImageView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor, constant: -standardHorizontalSpacer * 4).isActive = true
        earthHeroImageView.heightAnchor.constraint(equalToConstant: screenHeight * 0.12).isActive = true


        // Set Group Goal Label
        setGoalLabel.text = NSLocalizedString("group_goals", comment: "")
        scrollView.addSubview(setGoalLabel)
        setGoalLabel.setAnchor(top: chooseCoverPhotolabel.bottomAnchor, leading: view.safeLeadingAnchor, bottom: nil, trailing: view.safeTrailingAnchor, paddingTop: standardVerticalSpacer * 4, paddingLeft: standardHorizontalSpacer, paddingBottom: standardVerticalSpacer/6, paddingRight: standardHorizontalSpacer)
        
        // Set Group Goal
        setGroupGoal.setTitle( NSLocalizedString("", comment: ""), for: .normal)
        scrollView.addSubview(setGroupGoal)
        setGroupGoal.setAnchor(top: setGoalLabel.bottomAnchor, leading: view.safeLeadingAnchor, bottom: nil, trailing: view.safeTrailingAnchor, paddingTop: standardVerticalSpacer, paddingLeft: standardHorizontalSpacer, paddingBottom: standardVerticalSpacer, paddingRight: standardHorizontalSpacer, width: screenWidth * 0.9, height: screenHeight * 0.065)
        
        // Final Create Group Button
        communityGroupsCreateButton.setTitle( NSLocalizedString("create_group_final_button", comment: ""), for: .normal)
        scrollView.addSubview(communityGroupsCreateButton)
        
        communityGroupsCreateButton.setAnchor(top: setGroupGoal.bottomAnchor, leading: view.safeLeadingAnchor, bottom: nil, trailing: view.safeTrailingAnchor, paddingTop: standardVerticalSpacer, paddingLeft: standardHorizontalSpacer, paddingBottom: standardVerticalSpacer, paddingRight: standardHorizontalSpacer, width: screenWidth * 0.9, height: screenHeight * 0.065)
        
        // Handles the pop-up message and successful group creation
        let ButtonTap = UITapGestureRecognizer(target: self, action: #selector(setupNotificationMessageView))

        communityGroupsCreateButton.addGestureRecognizer(ButtonTap)
    }
    
    // MARK: Sets up popup screens
    // Message to setup asking permission to send notifications
    @objc func setupNotificationMessageView() {
        
        playTapSound()
        
    // Disable interaction on the button so it cannot be tapped again
        communityGroupsCreateButton.isUserInteractionEnabled = false

    // Move view off screen so that it can be animated back on
        messageView.center.y += screenHeight
        messageView.alpha = 1

        UIView.animate(withDuration: popUpAnimationDurationSeconds) {
            self.messageView.center.y -= screenHeight
            self.infoTranslucentBackground.alpha = translucentBackgroundAlpha
        }
        
        // Blurs background screen
        view.addSubview(infoTranslucentBackground)
        infoTranslucentBackground.setAnchor(top: view.topAnchor, leading: view.safeLeadingAnchor, bottom: view.safeBottomAnchor, trailing: view.safeTrailingAnchor, paddingTop: 0, paddingLeft: 0, paddingBottom: 0, paddingRight: 0)
        
        view.addSubview(messageView)
        messageView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        messageView.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
        messageView.widthAnchor.constraint(equalToConstant: screenWidth * 0.9).isActive = true
        messageView.heightAnchor.constraint(equalToConstant: screenHeight * 0.6).isActive = true
        messageView.backgroundColor = colorWhite
        
        
        // Message Text with Group Name
        // Everything is centered from this
        messageTextName.text = NSLocalizedString("popup_sub_message_name", comment: "")
        messageTextName.textAlignment = .center
        
        messageView.addSubview(messageTextName)
        messageTextName.centerYAnchor.constraint(equalTo: messageView.centerYAnchor, constant: standardVerticalSpacer/3).isActive = true
        messageTextName.leadingAnchor.constraint(equalTo: messageView.leadingAnchor, constant: standardHorizontalSpacer).isActive = true
        messageTextName.trailingAnchor.constraint(equalTo: messageView.trailingAnchor, constant: -standardHorizontalSpacer).isActive = true
        
        // Message Text
        messageText.text = NSLocalizedString("popup_sub_message", comment: "")
        messageText.textAlignment = .center
        messageView.addSubview(messageText)

        messageText.centerYAnchor.constraint(equalTo: messageTextName.centerYAnchor, constant: standardVerticalSpacer * 1.5).isActive = true
        messageText.centerXAnchor.constraint(equalTo: messageView.centerXAnchor).isActive = true
        messageText.widthAnchor.constraint(equalToConstant: screenWidth * 0.7).isActive = true
        
        // Message Title
        messageTitle.text = NSLocalizedString("popup_message", comment: "")
        messageTitle.textAlignment = .center
        messageTitle.textColor = colorDark
        
        messageView.addSubview(messageTitle)
        messageTitle.setAnchor(top: messageView.topAnchor, leading: messageView.leadingAnchor, bottom: messageTextName.topAnchor, trailing: messageView.trailingAnchor, paddingTop: standardVerticalSpacer/2, paddingLeft: standardHorizontalSpacer, paddingBottom: standardVerticalSpacer/2, paddingRight: standardHorizontalSpacer, width: screenWidth * 0.8, height: screenHeight * 0.03)
        
        // Earth Sprout Animation
        messageView.addSubview(earthSproutAnimation)
        earthSproutAnimation.setAnchor(top: messageTitle.bottomAnchor, leading: view.safeLeadingAnchor, bottom: nil, trailing: view.safeTrailingAnchor, paddingTop: 0, paddingLeft: standardHorizontalSpacer, paddingBottom: 0, paddingRight: standardHorizontalSpacer, width: 0, height: screenHeight * 0.25)
        
        // Animate Earth Sprout
        earthSproutAnimation.animationImages = earthSproutImagesArray
        earthSproutAnimation.animationDuration = 10
        earthSproutAnimation.startAnimating()
        
        // Animate appearance
        UIView.animate(withDuration: 1, delay: 0, options: [UIView.AnimationOptions.curveEaseIn], animations: {
            self.earthSproutAnimation.alpha = 1
        })
        
        // Invite & Dashboard Button Setup
        messageView.addSubview(inviteButton)
            // Use for only 1 button
        //okButton.centerXAnchor.constraint(equalTo: messageView.centerXAnchor).isActive = true
        inviteButton.topAnchor.constraint(equalTo: messageText.bottomAnchor, constant: standardVerticalSpacer).isActive = true
        inviteButton.leadingAnchor.constraint(equalTo: messageView.leadingAnchor, constant: standardHorizontalSpacer).isActive = true
        inviteButton.heightAnchor.constraint(equalToConstant: standardButtonHeight).isActive = true
        inviteButton.widthAnchor.constraint(equalToConstant: standardButtonWidth).isActive = true
        
        inviteButton.setTitle(NSLocalizedString("popup_invite", comment: ""), for: .normal)
        //inviteButton.addTarget(self, action: #selector(inviteButtonTapped), for: .touchUpInside)
        inviteButton.addTarget(self, action: #selector(setupInviteView), for: .touchUpInside)
        
        
        messageView.addSubview(dashboardButton)
        // Sets Dashboard BUttons to same Y-axis, adds Dashboard button to the right of the Invite Button
        dashboardButton.centerYAnchor.constraint(equalTo: inviteButton.centerYAnchor).isActive = true
        dashboardButton.trailingAnchor.constraint(equalTo: messageView.safeTrailingAnchor, constant: -standardHorizontalSpacer).isActive = true

        dashboardButton.heightAnchor.constraint(equalToConstant: standardButtonHeight).isActive = true
        dashboardButton.widthAnchor.constraint(equalToConstant: standardButtonWidth * 1.2).isActive = true

        dashboardButton.setTitle(NSLocalizedString("popup_go_to_dashboard", comment: ""), for: .normal)
        // Will add Dashboard navigation later
        dashboardButton.addTarget(self, action: #selector(goToGroupDashboard), for: .touchUpInside)
    }
    
    
    // MARK: Sets up invite instructions popup
    @objc func setupInviteView() {
        
        playTapSound()
        
    // Disable interaction on the button so it cannot be tapped again
        //communityGroupsCreateButton.isUserInteractionEnabled = false

    // Move view off screen so that it can be animated back on
        inviteView.center.y += screenHeight
        inviteView.alpha = 1

        UIView.animate(withDuration: popUpAnimationDurationSeconds) {
            self.inviteView.center.y -= screenHeight
            self.infoTranslucentBackground.alpha = translucentBackgroundAlpha
        }
        
        // Blurs background screen
        view.addSubview(infoTranslucentBackground)
        infoTranslucentBackground.setAnchor(top: view.topAnchor, leading: view.safeLeadingAnchor, bottom: view.safeBottomAnchor, trailing: view.safeTrailingAnchor, paddingTop: 0, paddingLeft: 0, paddingBottom: 0, paddingRight: 0)
        
        view.addSubview(inviteView)
        inviteView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        inviteView.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
        inviteView.widthAnchor.constraint(equalToConstant: screenWidth * 0.9).isActive = true
        inviteView.heightAnchor.constraint(equalToConstant: screenHeight * 0.3).isActive = true
        inviteView.backgroundColor = colorWhite
        inviteView.layer.borderColor = colorWhite.cgColor
        
        // Close button
        closeButton.setImage(UIImage(named:"ic_close_x"), for: .normal)
        inviteView.addSubview(closeButton)
        closeButton.setAnchor(top: inviteView.safeTopAnchor, leading: nil, bottom: nil, trailing: inviteView.safeTrailingAnchor, paddingTop: standardHorizontalSpacer, paddingLeft: 0, paddingBottom: 0, paddingRight: standardHorizontalSpacer, width: infoIconSize, height: infoIconSize)
        
        closeButton.addTarget(self, action: #selector(closeButtonTapped), for: .touchUpInside)
        
        // Everything is centered from this
        inviteText.text = NSLocalizedString("popup_instructions", comment: "")
        inviteText.textAlignment = .center
        
        inviteView.addSubview(inviteText)
        //inviteText.centerYAnchor.constraint(equalTo: inviteView.centerYAnchor, constant: standardVerticalSpacer).isActive = true
        inviteText.topAnchor.constraint(equalTo: inviteView.topAnchor, constant: standardVerticalSpacer).isActive = true
        inviteText.leadingAnchor.constraint(equalTo: inviteView.leadingAnchor, constant: standardHorizontalSpacer).isActive = true
        inviteText.trailingAnchor.constraint(equalTo: inviteView.trailingAnchor, constant: -standardHorizontalSpacer).isActive = true

        
        // Invite Button Setup
        inviteView.addSubview(inviteButton2)
        inviteButton2.centerXAnchor.constraint(equalTo: inviteView.centerXAnchor).isActive = true
        inviteButton2.topAnchor.constraint(equalTo: inviteText.bottomAnchor, constant: standardVerticalSpacer).isActive = true
        inviteButton2.leadingAnchor.constraint(equalTo: inviteText.leadingAnchor, constant: standardHorizontalSpacer).isActive = true
        inviteButton2.heightAnchor.constraint(equalToConstant: standardButtonHeight).isActive = true
        inviteButton2.widthAnchor.constraint(equalToConstant: standardButtonWidth).isActive = true
        inviteButton2.setTitle(NSLocalizedString("popup_invite", comment: ""), for: .normal)
        inviteButton2.addTarget(self, action: #selector(inviteButtonTapped), for: .touchUpInside)

    }
    
    @objc func closeButtonTapped() {
        
        playTapSound()

        // Enable interaction on the info button so it cab be tapped again
        inviteButton.isUserInteractionEnabled = true
        
        UIView.animate(withDuration: popUpAnimationDurationSeconds, animations: {
            self.inviteView.center.y -= screenHeight
            self.infoTranslucentBackground.alpha = 0
            
        }) { (finished) in
            // Move back into place so that it can animated again as needed
            // Handled this way because when there are animations the location completely resets
            self.inviteView.alpha = 0
            self.inviteView.center.y -= screenHeight
        }
        setupNotificationMessageView()
    }
    
    // MARK: Invite Button
    // Allows user to share the Earth Hero app
    @objc func inviteButtonTapped() {
        // Load Invite Controller
        let messageString: String = NSLocalizedString("home_invite_message", comment: "") + "\n\nhttps://www.earthhero.org/app"
        let activityVC = UIActivityViewController(activityItems: [messageString], applicationActivities: nil)
        activityVC.excludedActivityTypes = [.airDrop]
        
        if let popoverController = activityVC.popoverPresentationController {
            popoverController.sourceRect = CGRect(x: UIScreen.main.bounds.width / 2, y: UIScreen.main.bounds.height / 2, width: 0, height: 0)
            popoverController.sourceView = self.view
            popoverController.permittedArrowDirections = UIPopoverArrowDirection(rawValue: 0)
        }
        
        //activityVC.popoverPresentationController?.sourceView = self.view
        self.present(activityVC, animated: true, completion: {
            // Firebase Analytics Event
            // This fires when the screen closes, so there is no way to know if the user actually sent an invite
            //Analytics.logEvent(shareAppHomeAnalytics, parameters: nil)
            print("Invite a Friend!")
        })
    }
    
    @objc func goToGroupDashboard() {
        // Push user to Create New Group
        //self.onAction?(.didGoToGroupDash)
        let nextViewController = GroupDashboardViewController()
        self.navigationController?.pushViewController(nextViewController, animated: true)
        print("button tapped")
    }
    
    // MARK: Load User Data
    func loadUserData() {
        // Retrieve User Data from the Device User Defaults
        if let savedData = UserDefaults.standard.data(forKey: userDefaultsUserInformationKey),
            let userData = try? JSONDecoder().decode(UserInformation.self, from: savedData) {
            
            userInformation = userData
        }
    }
    
    // MARK: Collection View Functions
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return UIEdgeInsets(top: 0, left: 0, bottom: 0, right: screenWidth * 0.05)
    }
}
